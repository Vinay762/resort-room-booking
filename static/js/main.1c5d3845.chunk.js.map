{"version":3,"sources":["images/logo.svg","component/Hero.js","component/Banner.js","pages/Home.js","pages/Room.js","pages/SingleRoom.js","pages/Error.js","component/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Hero","children","hero","className","Banner","title","subtitle","defaultProps","Home","to","Room","SingleRoom","Component","Error","Navbar","state","isOpen","handleToggle","setState","src","logo","alt","type","onClick","this","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oHAAAA,EAAOC,QAAU,IAA0B,kC,+KCErCC,EAAO,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,KACtB,OACI,4BAAQC,UAAWD,GACdD,IAKED,ICRA,SAASI,EAAT,GAA4C,IAA3BH,EAA0B,EAA1BA,SAASI,EAAiB,EAAjBA,MAAiB,EAAXC,SAC3C,OACI,yBAAKH,UAAU,UACX,4BAAKE,GACL,8BACA,2BAAIJ,IDKhBD,EAAKO,aAAc,CACfL,KAAK,e,WEGMM,EAXF,WACT,OACI,kBAAC,EAAD,KACI,kBAACJ,EAAD,CAAQC,MAAM,kBAAkBC,SAAS,yCACrC,kBAAC,IAAD,CAAMG,GAAG,SAASN,UAAU,eAA5B,iBCADO,EANF,WACT,OACG,kBAAC,EAAD,CAAMR,KAAM,e,uCCOJS,E,iLARP,OACI,oD,GAHaC,aCEV,SAASC,IACpB,OACG,kBAAC,EAAD,M,6BCuCQC,E,2MAtCXC,MAAQ,CACJC,QAAQ,G,EAGZC,aAAe,WACX,EAAKC,SAAS,CAAEF,QAAS,EAAKD,MAAMC,U,wEAIpC,OACI,yBAAKb,UAAU,UACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,cACX,kBAAC,IAAD,CAAMM,GAAG,KACL,yBAAKU,IAAKC,IAAMC,IAAI,gBAExB,4BACIC,KAAK,SACLnB,UAAU,UACVoB,QAASC,KAAKP,cAEd,kBAAC,IAAD,CAAcd,UAAU,eAGhC,wBAAIA,UAAWqB,KAAKT,MAAMC,OAAS,qBAAuB,aACtD,4BACI,kBAAC,IAAD,CAAMP,GAAG,KAAT,SAEJ,4BACI,kBAAC,IAAD,CAAMA,GAAG,UAAT,iB,GA/BPG,aC+BNa,MAhBf,WACE,OACE,oCACA,kBAAC,EAAD,MACA,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWpB,IACjC,kBAAC,IAAD,CAAOkB,OAAK,EAACC,KAAK,UAAUC,UAAWlB,IACvC,kBAAC,IAAD,CAAOgB,OAAK,EAACC,KAAK,eAAeC,UAAWjB,IAC5C,kBAAC,IAAD,CAAOiB,UAAWf,OChBHgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACL,kBAAC,IAAD,KAAQ,kBAAC,EAAD,OACNC,SAASC,eAAe,SDuHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1c5d3845.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.9f0cccc1.svg\";","import React from 'react'\n\nconst Hero = ({ children, hero }) => {\n    return (\n        <header className={hero}>\n            {children}\n        </header>\n    )\n}\n\nexport default Hero\n\nHero.defaultProps= {\n    hero:'defaultHero'\n}\n","import React from 'react'\n\nexport default function Banner({children,title,subtitle}) {\n    return (\n        <div className=\"banner\">\n            <h1>{title}</h1>\n            <div></div>\n            <p>{children}</p>\n            \n        </div>\n    )\n}\n","import React from 'react'\nimport Hero from \"../component/Hero\";\nimport Banner from '../component/Banner'\nimport { Link } from \"react-router-dom\";\n\nconst Home = () => {\n    return (\n        <Hero>\n            <Banner title=\"Luxurious rooms\" subtitle=\"deluxe rooms starting from â‚¹399*\">\n                <Link to='/rooms' className=\"btn-primary\" >Book Rooms</Link>\n            </Banner>\n        </Hero>\n\n    )\n}\n\nexport default Home\n","import React from 'react';\nimport Hero from \"../component/Hero\";\n\nconst Room = () => {\n    return (\n       <Hero hero={'roomsHero'} />\n    )\n}\n\nexport default Room;\n","import React, { Component } from 'react';\n \nclass SingleRoom extends Component {\n    render() { \n        return (\n            <div>\n                SingleRoom Page\n            </div>\n        );\n    }\n}\n \nexport default SingleRoom;","import React from 'react'\nimport Hero from \"../component/Hero\";\n\n\nexport default function Error() {\n    return (\n       <Hero />\n    )\n}\n","import React, { Component } from 'react';\nimport logo from '../images/logo.svg';\nimport { FaAlignRight } from 'react-icons/fa'\nimport { Link } from \"react-router-dom\";\n\nclass Navbar extends Component {\n\n    state = {\n        isOpen: false\n    }\n\n    handleToggle = () => {\n        this.setState({ isOpen: !this.state.isOpen })\n    }\n\n    render() {\n        return (\n            <nav className=\"navbar\">\n                <div className=\"nav-center\">\n                    <div className=\"nav-header\">\n                        <Link to=\"/\">\n                            <img src={logo} alt=\"ECR Resort\" />\n                        </Link>\n                        <button\n                            type=\"button\"\n                            className=\"nav-btn\"\n                            onClick={this.handleToggle}\n                        >\n                            <FaAlignRight className=\"nav-icon\" />\n                        </button>\n                    </div>\n                    <ul className={this.state.isOpen ? \"nav-links show-nav\" : \"nav-links\"}>\n                        <li>\n                            <Link to=\"/\">Home</Link>\n                        </li>\n                        <li>\n                            <Link to=\"/rooms\">Rooms</Link>\n                        </li>\n                    </ul>\n                </div>\n            </nav>\n        );\n    }\n}\n\nexport default Navbar;","import React from 'react';\nimport \"./App.css\";\n\nimport {\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n//Import Screens\nimport Home from './pages/Home'\nimport Room from './pages/Room'\nimport SignleRoom from './pages/SingleRoom'\nimport Error from './pages/Error'\nimport SingleRoom from './pages/SingleRoom';\n//Import components\nimport Navbar from './component/Navbar';\n\n\n// created by selvakumar on 10/10/2019\n\nfunction App() {\n  return (\n    <> \n    <Navbar />\n    <Switch>\n     <Route exact path=\"/\" component={Home} />\n     <Route exact path=\"/rooms/\" component={Room} />\n     <Route exact path=\"/rooms/:slug\" component={SingleRoom} />\n     <Route component={Error} />\n\n    </Switch>\n     \n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter as Router,} from \"react-router-dom\";\n  \nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Router><App /></Router>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}